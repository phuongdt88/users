{
  "name": "pg-escape",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/segmentio/pg-escape"
  },
  "description": "escape postgres queries which do not support stored procedures",
  "keywords": [
    "pg",
    "postgres",
    "escape",
    "query"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "license": "MIT",
  "readme": "\n# pg-escape\n\n  Sprintf-style postgres query formatting and escape helper functions.\n\n## Installation\n\n```\n$ npm install pg-escape\n```\n\n## Example\n\n```js\nvar sql = escape('INSERT INTO %I VALUES(%L)', 'books', \"O'Reilly\");\nconsole.log(sql);\n```\n\nyields:\n\n```\nINSERT INTO books VALUES('O''Reilly')\n```\n\n## API\n\n### escape(fmt, ...)\n\n Format the given arguments.\n\n### escape.string(val)\n\n  Format as a simple string.\n\n### escape.ident(val)\n\n  Format as an identifier.\n\n### escape.literal(val)\n\n  Format as a literal.\n\n## Formats\n\n- `%s` formats the argument value as a simple string. A null value is treated as an empty string.\n- `%I` treats the argument value as an SQL identifier, double-quoting it if necessary. It is an error for the value to be null.\n- `%L` quotes the argument value as an SQL literal. A null value is displayed as the string NULL, without quotes.\n- `%%` In addition to the format specifiers described above, the special sequence %% may be used to output a literal % character.\n\n# License\n\n  MIT",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/segmentio/pg-escape/issues"
  },
  "homepage": "https://github.com/segmentio/pg-escape",
  "_id": "pg-escape@0.0.2",
  "dist": {
    "shasum": "fdb4dd62bd7bad836708631840807d826469aa05"
  },
  "_from": "pg-escape@*",
  "_resolved": "https://registry.npmjs.org/pg-escape/-/pg-escape-0.0.2.tgz"
}
